esphome:
  name: sterownik_kotla_v2
  on_boot:
  - state_machine.set: IDLE
  - switch.turn_off: stove_relay
  - switch.turn_off: wh_relay
  - logger.log:
      format: "FW VERSION: 0.2"
      level: WARN

esp32:
  board: esp32dev

# Enable logging
logger:
  #level: WARN
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: "skR9b3kg8faCvxnHIbOD6wVlXalUKTOzlHtLhpnUOA8="

ota:
  - platform: esphome
    password: "28cf72c4b1505ff8519fee3d866a9d54"

packages:
  wifi: !include wifi.yaml

captive_portal:

spi:
  clk_pin: GPIO17    #  sck 
  mosi_pin: GPIO23   #  mosi -> SDA(Serial DAta)
  
font:
  - file: "arial.ttf"
    id: arial
    size: 10 
  - file: "Consolas.ttf"
    id: consolas
    size: 10
color:
  - id: light_red
    red: 100%
    green: 20%
    blue: 25%
    white: 0%
  - id: light_green
    red: 0%
    green: 100%
    blue: 25%
    white: 0%
display:
  - platform: ili9xxx
    model: "ST7735"
    cs_pin: GPIO21    #  D21->CS
    dc_pin: GPIO22    #  D22->A0  
    invert_colors: false

    lambda: |-
      it.printf(0, 0, id(consolas),  "Stan: %s", id(current_state).state.c_str());
      it.printf(0, 9, id(consolas),  "Tryb: %s", id(mode).c_str());
      it.printf(0, 18, id(consolas), id(light_green), "------- Bufor --------");
      it.printf(0, 27, id(consolas), " %12s %.1f °C", "Gora:", id(buffer_temp_top).state);
      it.printf(0, 36, id(consolas), " %12s %.1f °C", "Dol:", id(buffer_temp_bottom).state);
      it.printf(0, 45, id(consolas), " %12s %.1f °C", "T zadana:", id(buffer_temp_target).state);
      it.printf(0, 54, id(consolas), " %12s %.1f °C", "T minimalna:", id(buffer_temp_min).state);
      it.printf(0, 63, id(consolas), id(light_green), "-------- CWU ---------");
      it.printf(0, 72, id(consolas), " %12s %.1f °C", "Temperatura:", id(WH_temp).state);
      it.printf(0, 81, id(consolas), " %12s %.1f °C", "T zadana:", id(WH_temp_target).state); 
      it.printf(0, 90, id(consolas), " %12s %.1f °C", "T minimalna:", id(WH_temp_min).state);
      it.printf(0, 99, id(consolas), " ");
      it.printf(0, 108, id(consolas), " %13s %s", "Kociol:", id(stove_relay).state==true?"ON":"OFF");
      it.printf(0, 117, id(consolas), " %13s %s", "Grzanie CWU:", id(wh_relay).state==true?"ON":"OFF");
      it.printf(0, 126, id(consolas), " %13s %s", "Pompa CWU:", true==true?"ON":"OFF");
      it.printf(0, 135, id(consolas), " %13s %s", "Dogrzewanie :", id(top_up_active)==true?"ON":"OFF")  ;
      it.printf(0, 144, id(consolas), " %13s %s", "WiFi:", id(wifi_id).is_connected()==true?"Polaczono":"Blad!");

globals:
  - id: mode
    type: std::string
    initial_value: '"LATO"'
  - id: top_up_active
    type: bool  
    initial_value: 'true'

external_components:
  - source: 
      type: git
      url: https://github.com/muxa/esphome-state-machine

text_sensor:
  - platform: state_machine
    id: current_state
    name: Current State
    on_value:
      - logger.log: 
            format: "Entering %s state"
            args: [ 'id(current_state).state.c_str()']
            level: WARN


state_machine:
  - name: "Maszyna stanów kotłowni"
    id: "sm1"
    initial_state: IDLE
    states: 
    - name: IDLE
      on_enter:
        - switch.turn_off: stove_relay
        - switch.turn_off: wh_relay
    - name: BUFFER_LOADING
      on_enter:
        - switch.turn_on: stove_relay
        - switch.turn_off: wh_relay
    - name: BUFFER_FULL
      on_enter:
        - if:
            condition: # jeśli ustawiona jest flaga DOGRZEWANIE_CWU. nie sprawdzam temeraatury zasobnika, najwyżej od rezu się wyłaczy
              lambda: 'return id(top_up_active);'
            then:
              - state_machine.transition: TOP_UP
            else:
              - state_machine.transition: GO_IDLE
    - name: WH_LOADING
      on_enter:
        - switch.turn_on: stove_relay
        - switch.turn_on: wh_relay
    - name: WH_LOADING_INTERRUPTED #do tego stanu przechodzi, gdy trzeba podgrzać CWU w trakcie grzania bufora. Normalnie po nagrzniu CWU przeszedłbby w IDLE
                                   #ale z tego stanu wraca do grzania bufora
      on_enter:
        - switch.turn_on: stove_relay
        - switch.turn_on: wh_relay
    - name: WH_FULL #ciągle nie jestem pewien, czy ten stan jest potrzebny. W teorii ma zapobiec chwilowemu wyłaczeniu przekaźnika, bo nie wiadomo jak się wtedy piec zachowa
                    #cholera wie, czy nie zacznie sie wygaszać, daję sobie 2,5 czasu na ewentualny trigger z dallas_temp przejście do grzania bufora
      on_enter:
        - if:
            condition:
              lambda: 'return id(mode) == "LATO";'
            then:
              - logger.log:
                  format: ""
                  level: WARN
              - state_machine.transition: GO_IDLE
        - if:
            condition:
              and:
                - lambda: 'return id(mode) == "ZIMA";'
                - lambda: 'return id(top_up_active);'
            then:
              - state_machine.transition: TOP_UP
        - if:
            condition:
              and:
                - lambda: 'return id(mode) == "ZIMA";'
                - lambda: 'return ~id(top_up_active);'
            then:
              - state_machine.transition: GO_IDLE
    - name: WH_TOP_UP #dogrzewanie cwu. po naładowaniu bufora dogrzewamy zasobnik, żeby uniknąć niepotrzebnego wygaszania kotła
      on_enter:
        - if:
            condition: 
              - lambda: 'return id(WH_temp).state >= id(WH_temp_target).state;' 
            then:
              - state_machine.transition: GO_IDLE
            else:
              - switch.turn_on: stove_relay
              - switch.turn_on: wh_relay
    - name: BUFFER_TOP_UP #dogrzewanie bufora, analogicznie co CWU
      on_enter:
        - if:
            condition: 
              - lambda: 'return id(buffer_temp_bottom).state >= id(buffer_temp_target).state;' 
            then:
              - state_machine.transition: GO_IDLE
            else:
              - switch.turn_on: stove_relay
              - switch.turn_off: wh_relay
    inputs:
      - name: WH_TEMP_BELOW_MIN
        transitions:
          - IDLE -> WH_LOADING
          - BUFFER_LOADING -> WH_LOADING_INTERRUPTED
          - BUFFER_TOP_UP -> WH_LOADING_INTERRUPTED 
      - name: WH_TEMP_REACHED
        transitions:
          - WH_LOADING -> WH_FULL
          - WH_TOP_UP -> WH_FULL
          - WH_LOADING_INTERRUPTED -> BUFFER_LOADING
      - name: BUFFER_TEMP_BELOW_MIN
        transitions:
          - IDLE -> BUFFER_LOADING
          - WH_FULL -> BUFFER_LOADING #patrz: komentarz do stanu WH_FULL
      - name: BUFFER_TEMP_REACHED
        transitions:
          - BUFFER_LOADING -> BUFFER_FULL
          - BUFFER_TOP_UP -> BUFFER_FULL
      - name: TOP_UP
        transitions:
          - BUFFER_FULL -> WH_TOP_UP
          - WH_FULL -> BUFFER_TOP_UP
      - name: GO_IDLE
        transitions:
          - BUFFER_FULL -> IDLE
          - BUFFER_TOP_UP -> IDLE
          - WH_LOADING -> IDLE
          - WH_TOP_UP -> IDLE
          - WH_FULL -> IDLE
          
number:
  - platform: template
    name: "T. zadana bufora"
    id: buffer_temp_target
    restore_value: True
    initial_value: 75
    optimistic: True
    min_value: 50
    max_value: 80
    step: 1
  - platform: template
    name: "T. minimalna bufora"
    id: "buffer_temp_min"
    optimistic: True
    restore_value: True
    initial_value: 35
    min_value: 30
    max_value: 40
    step: 1
  - platform: template
    name: "T. zadana CWU"
    id: "WH_temp_target"
    restore_value: True
    initial_value: 45
    optimistic: True
    min_value: 40
    max_value: 60
    step: 1 
  - platform: template
    name: "T. minimalna CWU"
    id: "WH_temp_min"
    optimistic: True
    restore_value: True
    initial_value: 35
    min_value: 30
    max_value: 45
    step: 1

one_wire:
  - platform: gpio
    pin: GPIO14
    
  
sensor:
  - platform: dallas_temp
    update_interval: 2s
    accuracy_decimals: 1
    address: 0x3d0922200f71d728
    name: "Bufor gora"
    id: "buffer_temp_top"
    on_value:
      if:
        condition: # jeśli temperatura na górze BUFORA spadnie poniżej minimalnej
          and:
            - lambda: 'return id(buffer_temp_top).state < id(buffer_temp_min).state;'
            - lambda: 'return id(mode) == "ZIMA";'
        then:
          - state_machine.transition: BUFFER_TEMP_BELOW_MIN
  #####
  - platform: dallas_temp
    update_interval: 2s
    accuracy_decimals: 1
    #address: 0x3d0922200f71d728
    name: "Bufor dol"
    id: "buffer_temp_bottom"
    on_value:
      if:
        condition: # jeśli tempetatura na dole BUFORA osiognie temperaturę zadaną
          lambda: 'return id(buffer_temp_bottom).state >= id(buffer_temp_target).state;'
        then:
          - state_machine.transition: BUFFER_TEMP_REACHED
  - platform: dallas_temp
    update_interval: 2s
    accuracy_decimals: 1
    #address: 0x381268581e64ff28
    name: "Zasobnik CWU"
    id: "WH_temp"
    on_value:
      - if:
          condition: #jeśli temperatura zasobnika poniżej dolnego limitu
            lambda: 'return id(WH_temp).state < id(WH_temp_min).state;'
          then: 
            - state_machine.transition: WH_TEMP_BELOW_MIN
      - if:
          condition:
            lambda: 'return id(WH_temp).state >= id(WH_temp_target).state;'
          then:
            - state_machine.transition: WH_TEMP_REACHED

switch:
  - platform: gpio
    pin: GPIO32
    name: "Włączanie kotła"
    id: stove_relay
    #inverted: false
  - platform: gpio
    pin: GPIO33
    name: "Grzanie CWU"
    id: wh_relay #WH = water heater
    #inverted: true
  - platform: gpio
    pin: GPIO25
    name: "Cyrkulacja CWU"
    id: hot_water_pump_relay
    #inverted: true
  - platform: gpio
    pin: GPIO26
    name: "Pompa obiegowa"
    id: circulation_pump_relay 
    #inverted: true
  - platform: template
    name: "Tryb (Lato/Zima)"
    id: mode_switch
    turn_on_action: 
      - globals.set:
          id: mode
          value: '"ZIMA"'
      - switch.template.publish:
          id: mode_switch
          state: !lambda 'return true;'
      - logger.log:
          format: "Mode: %s"
          args: [ 'id(mode).c_str()']
          level: WARN
    turn_off_action:
      - globals.set:
            id: mode
            value: '"LATO"'
      - switch.template.publish:
          id: mode_switch
          state: !lambda 'return false;'  
      - logger.log:
          format: "Mode: %s"
          args: [ 'id(mode).c_str()']
          level: WARN
  - platform: template
    name: "Dogrzewanie CWU"
    id: top_up_switch
    turn_on_action: 
      - globals.set:
          id: top_up_active
          value: "true"
      - switch.template.publish:
          id: top_up_switch
          state: !lambda 'return true;'
      - logger.log: 
            format: "top_up_active: %d"
            args: [ 'id(top_up_active)']
            level: WARN
    turn_off_action:
      - globals.set:
            id: top_up_active
            value: "false"
      - switch.template.publish:
          id: top_up_switch
          state: !lambda 'return false;'  
      - logger.log: 
            format: "top_up_active: %d"
            args: [ 'id(top_up_active)']
            level: WARN